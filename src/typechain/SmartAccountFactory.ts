/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface SmartAccountFactoryInterface extends utils.Interface {
  functions: {
    "accountCreationCode()": FunctionFragment;
    "basicImplementation()": FunctionFragment;
    "deployAccount(address)": FunctionFragment;
    "deployCounterFactualAccount(address,uint256)": FunctionFragment;
    "getAddressForCounterFactualAccount(address,uint256)": FunctionFragment;
    "minimalHandler()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accountCreationCode"
      | "basicImplementation"
      | "deployAccount"
      | "deployCounterFactualAccount"
      | "getAddressForCounterFactualAccount"
      | "minimalHandler"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accountCreationCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "basicImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deployCounterFactualAccount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressForCounterFactualAccount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "minimalHandler",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accountCreationCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "basicImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployCounterFactualAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressForCounterFactualAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimalHandler",
    data: BytesLike
  ): Result;

  events: {
    "AccountCreation(address,address,uint256)": EventFragment;
    "AccountCreationWithoutIndex(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountCreation"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AccountCreationWithoutIndex"
  ): EventFragment;
}

export interface AccountCreationEventObject {
  account: string;
  owner: string;
  index: BigNumber;
}
export type AccountCreationEvent = TypedEvent<
  [string, string, BigNumber],
  AccountCreationEventObject
>;

export type AccountCreationEventFilter = TypedEventFilter<AccountCreationEvent>;

export interface AccountCreationWithoutIndexEventObject {
  account: string;
  owner: string;
}
export type AccountCreationWithoutIndexEvent = TypedEvent<
  [string, string],
  AccountCreationWithoutIndexEventObject
>;

export type AccountCreationWithoutIndexEventFilter =
  TypedEventFilter<AccountCreationWithoutIndexEvent>;

export interface SmartAccountFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SmartAccountFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountCreationCode(overrides?: CallOverrides): Promise<[string]>;

    basicImplementation(overrides?: CallOverrides): Promise<[string]>;

    deployAccount(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployCounterFactualAccount(
      _owner: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAddressForCounterFactualAccount(
      _owner: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { _account: string }>;

    minimalHandler(overrides?: CallOverrides): Promise<[string]>;
  };

  accountCreationCode(overrides?: CallOverrides): Promise<string>;

  basicImplementation(overrides?: CallOverrides): Promise<string>;

  deployAccount(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployCounterFactualAccount(
    _owner: PromiseOrValue<string>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAddressForCounterFactualAccount(
    _owner: PromiseOrValue<string>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  minimalHandler(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    accountCreationCode(overrides?: CallOverrides): Promise<string>;

    basicImplementation(overrides?: CallOverrides): Promise<string>;

    deployAccount(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    deployCounterFactualAccount(
      _owner: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAddressForCounterFactualAccount(
      _owner: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    minimalHandler(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AccountCreation(address,address,uint256)"(
      account?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      index?: PromiseOrValue<BigNumberish> | null
    ): AccountCreationEventFilter;
    AccountCreation(
      account?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      index?: PromiseOrValue<BigNumberish> | null
    ): AccountCreationEventFilter;

    "AccountCreationWithoutIndex(address,address)"(
      account?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null
    ): AccountCreationWithoutIndexEventFilter;
    AccountCreationWithoutIndex(
      account?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null
    ): AccountCreationWithoutIndexEventFilter;
  };

  estimateGas: {
    accountCreationCode(overrides?: CallOverrides): Promise<BigNumber>;

    basicImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    deployAccount(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployCounterFactualAccount(
      _owner: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAddressForCounterFactualAccount(
      _owner: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimalHandler(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accountCreationCode(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    basicImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployAccount(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployCounterFactualAccount(
      _owner: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAddressForCounterFactualAccount(
      _owner: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimalHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
